'use strict';
const awsServerlessExpress = require('aws-serverless-express');
async function getEnvFromSecretManager() {
  // Load the AWS SDK
  process.env.SECRET_NAME = 'nv-db-cmswebsite-rw-dev';
  process.env.AWS_REGION = 'us-east-1';
  if (!process.env.SECRET_NAME) {
    // TODO: remove this after testing is done
    console.error('No SECRET_NAME set!');
    return null;
  }
  var AWS = require('aws-sdk'),
    region = process.env.AWS_REGION,
    secretName = process.env.SECRET_NAME;
  // Create a Secrets Manager client
  var client = new AWS.SecretsManager({
    region: region,
  });
  return new Promise((resolve, reject) => {
    client.getSecretValue({ SecretId: secretName }, function (err, data) {
      // In this sample we only handle the specific exceptions for the 'GetSecretValue' API.
      // See https://docs.aws.amazon.com/secretsmanager/latest/apireference/API_GetSecretValue.html
      // We rethrow the exception by default.
      if (err) {
        reject(err);
      } else {
        // Decrypts secret using the associated KMS CMK.
        // Depending on whether the secret is a string or binary, one of these fields will be populated.
        if ('SecretString' in data) {
          resolve(data.SecretString);
        } else {
          let buff = Buffer.from(data.SecretBinary, 'base64');
          resolve(buff.toString('ascii'));
        }
      }
    });
  });
}
exports.handler = async function (event, context) {
  let secrets = await getEnvFromSecretManager();
  console.log(event);
  try {
    if (secrets) {
      secrets = JSON.parse(secrets);
      process.env.DB_NAME = secrets.dbname;
      process.env.DB_USER = secrets.username;
      process.env.DB_PASS = secrets.password;
      process.env.DB_HOST = secrets.host;
      process.env.DB_PORT = secrets.port;
    }
  } catch (e) {
    console.error(e);
    console.error("Couldn't fetch creds");
  }
  const app = require('./app');
  const server = awsServerlessExpress.createServer(app["default"]);
  return new Promise((resolve, reject) => {   
    awsServerlessExpress.proxy(server, event, { ...context, succeed: resolve, fail: reject });
  });
};;