"use strict";

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }
  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
      args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);
      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }
      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }
      _next(undefined);
    });
  };
}

var awsServerlessExpress = require("aws-serverless-express");

var app = require("./app");

var server = awsServerlessExpress.createServer(app);

function getEnvFromSecretManager() {
  return _getEnvFromSecretManager.apply(this, arguments);
}

function _getEnvFromSecretManager() {
  _getEnvFromSecretManager = _asyncToGenerator(
    /*#__PURE__*/ regeneratorRuntime.mark(function _callee2() {
      var AWS, region, secretName, client;
      return regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch ((_context2.prev = _context2.next)) {
            case 0:
              if (process.env.SECRET_NAME) {
                _context2.next = 3;
                break;
              }

              // TODO: remove this after testing is done
              console.log("No SECRET_NAME set!");
              return _context2.abrupt("return", null);

            case 3:
              (AWS = require("aws-sdk")),
                (region = process.env.AWS_REGION),
                (secretName = process.env.SECRET_NAME); // Create a Secrets Manager client

              client = new AWS.SecretsManager({
                region: region
              });
              return _context2.abrupt(
                "return",
                new Promise(function (resolve, reject) {
                  client.getSecretValue(
                    {
                      SecretId: secretName
                    },
                    function (err, data) {
                      // In this sample we only handle the specific exceptions for the 'GetSecretValue' API.
                      // See https://docs.aws.amazon.com/secretsmanager/latest/apireference/API_GetSecretValue.html
                      // We rethrow the exception by default.
                      if (err) {
                        reject(err);
                      } else {
                        // Decrypts secret using the associated KMS CMK.
                        // Depending on whether the secret is a string or binary, one of these fields will be populated.
                        if ("SecretString" in data) {
                          resolve(data.SecretString);
                        } else {
                          var buff = Buffer.from(data.SecretBinary, "base64");
                          resolve(buff.toString("ascii"));
                        }
                      }
                    }
                  );
                })
              );

            case 6:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    })
  );
  return _getEnvFromSecretManager.apply(this, arguments);
}

module.exports = /*#__PURE__*/ (function () {
  var _handler = _asyncToGenerator(
    /*#__PURE__*/ regeneratorRuntime.mark(function _callee(event, context) {
      var secrets;
      return regeneratorRuntime.wrap(
        function _callee$(_context) {
          while (1) {
            switch ((_context.prev = _context.next)) {
              case 0:
                _context.prev = 0;
                _context.next = 3;
                return getEnvFromSecretManager();

              case 3:
                secrets = _context.sent;

                if (secrets) {
                  process.env.DB_NAME = secrets.DB_NAME;
                  process.env.DB_USER = secrets.DB_USER;
                  process.env.DB_PASS = secrets.DB_PASS;
                  process.env.DB_HOST = secrets.DB_HOST;
                  process.env.DB_PORT = secrets.DB_PORT;
                }

                _context.next = 11;
                break;

              case 7:
                _context.prev = 7;
                _context.t0 = _context["catch"](0);
                console.error(_context.t0);
                console.error("Couldn't fetch creds");

              case 11:
                awsServerlessExpress.proxy(server, event, context);

              case 12:
              case "end":
                return _context.stop();
            }
          }
        },
        _callee,
        null,
        [[0, 7]]
      );
    })
  );

  function handler(_x, _x2) {
    return _handler.apply(this, arguments);
  }

  return handler;
})();
